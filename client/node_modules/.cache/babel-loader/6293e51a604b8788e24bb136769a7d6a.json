{"ast":null,"code":"var _jsxFileName = \"/mnt/e0b587b1-3bde-497e-bc0a-17dffdca6182/Dev/ninalihome/client/src/components/layout/slider/Slider.jsx\";\nimport React, { useState, useRef, useEffect, useLayoutEffect } from \"react\";\nimport SliderItem from \"./sliderItem/SliderItem\";\nimport \"./slider.css\";\n\nconst Slider = () => {\n  const data = [{\n    id: 1,\n    name: \"\"\n  }, {\n    id: 2,\n    name: \"\"\n  }, {\n    id: 3,\n    name: \"\"\n  }, {\n    id: 4,\n    name: \"\"\n  }, {\n    id: 5,\n    name: \"\"\n  }, {\n    id: 6,\n    name: \"\"\n  }, {\n    id: 7,\n    name: \"\"\n  }, {\n    id: 8,\n    name: \"\"\n  }];\n  const sliderWidth = useRef(); // const initialState = {\n  //   items: 0,\n  //   totalItems: data,\n  //   itemWidth: 0,\n  //   margin: 0,\n  // };\n  // const [slider, setSlider] = useState(initialState);\n  // const [hasRendered, setHasRendered] = useState(false);\n  // const [dimensions, setDimensions] = useState({\n  //   height: window.innerHeight,\n  //   width: window.innerWidth,\n  // });\n  // const responsive = [\n  //   { breakPoint: { width: 0, item: 1 } }, //if width greater than 0 (1 item will show)\n  //   { breakPoint: { width: 700, item: 2 } }, //if width greater than 600 (2  item will show)\n  //   { breakPoint: { width: 1200, item: 4 } }, //if width greater than 1000 (4 item will show)\n  // ];\n  // // Calculate each item width\n  // const resizeWidth = () => {\n  //   const width = sliderWidth.current.offsetWidth;\n  //   const calc = width / slider.items - 20;\n  //   setSlider({ ...slider, itemWidth: calc });\n  // };\n  // // Calculate total amount of items to display, depended on screen width\n  // const itemsDisplay = () => {\n  //   for (let i = 0; i < responsive.length; i++) {\n  //     if (dimensions.width > responsive[i].breakPoint.width) {\n  //       setSlider((prevState) => ({\n  //         ...prevState,\n  //         items: responsive[i].breakPoint.item,\n  //       }));\n  //     }\n  //   }\n  // };\n  // // Change width on load\n  // useLayoutEffect(() => {\n  //   setHasRendered(true);\n  //   resizeWidth();\n  //   itemsDisplay();\n  //   // eslint-disable-next-line\n  // }, [hasRendered]);\n  // function debounce(fn, ms) {\n  //   let timer;\n  //   return (_) => {\n  //     clearTimeout(timer);\n  //     timer = setTimeout((_) => {\n  //       timer = null;\n  //       fn.apply(this, arguments);\n  //     }, ms);\n  //   };\n  // }\n  // // Change width on screen width change, after load\n  // useEffect(() => {\n  //   const debouncedHandleResize = debounce(function handleResize() {\n  //     setDimensions({\n  //       height: window.innerHeight,\n  //       width: window.innerWidth,\n  //     });\n  //     resizeWidth();\n  //     itemsDisplay();\n  //   }, 60);\n  //   window.addEventListener(\"resize\", debouncedHandleResize);\n  //   return (_) => {\n  //     window.removeEventListener(\"resize\", debouncedHandleResize);\n  //   };\n  // });\n\n  const itemRef = data.reduce((acc, value) => {\n    acc[value.id] = React.createRef();\n    return acc;\n  }, {});\n  let index = 4;\n\n  const clickBtn = increase => {\n    index = index + increase;\n    console.log(itemRef); // console.log(itemRef.length);\n    // index = Math.min(Math.max(index, 0), itemRef.length - 1);\n\n    itemRef[index].current.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"slider-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn slider__btn-left\",\n    onClick: () => clickBtn(-1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-chevron-left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"ul\", {\n    className: \"slider\",\n    ref: sliderWidth,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }, data.map(item => /*#__PURE__*/React.createElement(SliderItem, {\n    key: item.id,\n    id: item.id,\n    ref: itemRef[item.id] // width={slider.itemWidth}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn slider__btn-right\",\n    onClick: () => clickBtn(+1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"i\", {\n    className: \"fas fa-chevron-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"slider__bar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default Slider;","map":{"version":3,"sources":["/mnt/e0b587b1-3bde-497e-bc0a-17dffdca6182/Dev/ninalihome/client/src/components/layout/slider/Slider.jsx"],"names":["React","useState","useRef","useEffect","useLayoutEffect","SliderItem","Slider","data","id","name","sliderWidth","itemRef","reduce","acc","value","createRef","index","clickBtn","increase","console","log","current","scrollIntoView","behavior","map","item"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect, useLayoutEffect } from \"react\";\nimport SliderItem from \"./sliderItem/SliderItem\";\nimport \"./slider.css\";\n\nconst Slider = () => {\n  const data = [\n    { id: 1, name: \"\" },\n    { id: 2, name: \"\" },\n    { id: 3, name: \"\" },\n    { id: 4, name: \"\" },\n    { id: 5, name: \"\" },\n    { id: 6, name: \"\" },\n    { id: 7, name: \"\" },\n    { id: 8, name: \"\" },\n  ];\n  const sliderWidth = useRef();\n\n  // const initialState = {\n  //   items: 0,\n  //   totalItems: data,\n  //   itemWidth: 0,\n  //   margin: 0,\n  // };\n\n  // const [slider, setSlider] = useState(initialState);\n\n  // const [hasRendered, setHasRendered] = useState(false);\n\n  // const [dimensions, setDimensions] = useState({\n  //   height: window.innerHeight,\n  //   width: window.innerWidth,\n  // });\n\n  // const responsive = [\n  //   { breakPoint: { width: 0, item: 1 } }, //if width greater than 0 (1 item will show)\n  //   { breakPoint: { width: 700, item: 2 } }, //if width greater than 600 (2  item will show)\n  //   { breakPoint: { width: 1200, item: 4 } }, //if width greater than 1000 (4 item will show)\n  // ];\n\n  // // Calculate each item width\n  // const resizeWidth = () => {\n  //   const width = sliderWidth.current.offsetWidth;\n  //   const calc = width / slider.items - 20;\n  //   setSlider({ ...slider, itemWidth: calc });\n  // };\n\n  // // Calculate total amount of items to display, depended on screen width\n  // const itemsDisplay = () => {\n  //   for (let i = 0; i < responsive.length; i++) {\n  //     if (dimensions.width > responsive[i].breakPoint.width) {\n  //       setSlider((prevState) => ({\n  //         ...prevState,\n  //         items: responsive[i].breakPoint.item,\n  //       }));\n  //     }\n  //   }\n  // };\n\n  // // Change width on load\n  // useLayoutEffect(() => {\n  //   setHasRendered(true);\n  //   resizeWidth();\n  //   itemsDisplay();\n  //   // eslint-disable-next-line\n  // }, [hasRendered]);\n\n  // function debounce(fn, ms) {\n  //   let timer;\n  //   return (_) => {\n  //     clearTimeout(timer);\n  //     timer = setTimeout((_) => {\n  //       timer = null;\n  //       fn.apply(this, arguments);\n  //     }, ms);\n  //   };\n  // }\n\n  // // Change width on screen width change, after load\n  // useEffect(() => {\n  //   const debouncedHandleResize = debounce(function handleResize() {\n  //     setDimensions({\n  //       height: window.innerHeight,\n  //       width: window.innerWidth,\n  //     });\n  //     resizeWidth();\n  //     itemsDisplay();\n  //   }, 60);\n\n  //   window.addEventListener(\"resize\", debouncedHandleResize);\n\n  //   return (_) => {\n  //     window.removeEventListener(\"resize\", debouncedHandleResize);\n  //   };\n  // });\n\n  const itemRef = data.reduce((acc, value) => {\n    acc[value.id] = React.createRef();\n    return acc;\n  }, {});\n\n  let index = 4;\n\n  const clickBtn = (increase) => {\n    index = index + increase;\n    console.log(itemRef);\n    // console.log(itemRef.length);\n    // index = Math.min(Math.max(index, 0), itemRef.length - 1);\n    itemRef[index].current.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  return (\n    <div className=\"slider-container\">\n      <button className=\"btn slider__btn-left\" onClick={() => clickBtn(-1)}>\n        <i className=\"fas fa-chevron-left\" />\n      </button>\n      <ul className=\"slider\" ref={sliderWidth}>\n        {data.map((item) => (\n          <SliderItem\n            key={item.id}\n            id={item.id}\n            ref={itemRef[item.id]}\n            // width={slider.itemWidth}\n          />\n        ))}\n      </ul>\n      <button className=\"btn slider__btn-right\" onClick={() => clickBtn(+1)}>\n        <i className=\"fas fa-chevron-right\" />\n      </button>\n      <div className=\"slider__bar\"></div>\n    </div>\n  );\n};\n\nexport default Slider;\n"]},"metadata":{},"sourceType":"module"}